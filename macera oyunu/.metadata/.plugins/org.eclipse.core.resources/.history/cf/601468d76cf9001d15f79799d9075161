package location.BattleLoc;

import java.util.Scanner;

import location.Location;
import monster.Monster;
import player.Inventory;
import player.Player;

public abstract class BattleLoc extends Location{

	static Monster monster;
	
	
	public BattleLoc() {}
	
	public BattleLoc(Player player, Monster monster) {
		super(player);
		this.monster = monster;
	}
	
	
	public void onLocation(Monster m) throws Exception{

		int mN = m.monsterNumber();
		
		System.out.println();
		System.out.println("Dikkatli ol! Mağarada birden fazla zombi olabilir");
		System.out.println("Zombilerin üstesinden gelebilirsen mağaradan yemek kazanarak çıkacağını unutma");
		System.out.println("Fakat zombilerin üstesinden gelemezsen ölürsün 💀");
		scanner.nextLine();

		if(mN == 1) {
			fightOrFlight(mN);
			String savasYADAkac = scanner.nextLine();
			switch (savasYADAkac) {
			case "s": {
				int counter = 0;
				for(int i=0; i<mN; i++) {
					zombie.setHealthy(10);
					combat(zombie);
					System.out.println(" ZOMBİ ÖLDÜ !");
					counter ++;
				}
				
				moneyEarnedFromZombies(counter);	
				this.isFood();	
				break;
			}
			case "k": {
				selectLocation();
				break;
			}
			default:
				System.out.println("Yanlış seçim yaptın !!!");
				onLocation();
			}
		}
		
		else if (mN == 2) {
			fightOrFlight(mN);
			String savasYADAkac = scanner.nextLine();
			switch (savasYADAkac) {
			case "s": {
				int counter = 0;
				for(int i=0; i<mN; i++) {
					zombie.setHealthy(10);
					combat(zombie);
					System.out.println(" ZOMBİ ÖLDÜ !");
					counter ++;
				}
				moneyEarnedFromZombies(counter);
				this.isFood();
				break;
			}
			case "k": {
				selectLocation();
				break;
			}
			default:
				System.out.println("Yanlış seçim yaptın !!!");
				onLocation();
			}
		}
		
		else if(mN == 3){
			fightOrFlight(mN);
			String savasYADAkac = scanner.nextLine();
			switch (savasYADAkac) {
			case "s": {
				int counter = 0;
				for(int i=0; i<mN; i++) {
					zombie.setHealthy(10);
					combat(zombie);
					System.out.println(" ZOMBİ ÖLDÜ !");
					counter ++;
				}
				moneyEarnedFromZombies(counter);
				this.isFood();
				break;
			}
			case "k": {
				System.out.println("👣 👣 👣 👣 👣 👣 👣 👣 👣 👣 👣 👣 👣 👣 👣 👣");
				selectLocation();
				break;
			}
			default:
				System.out.println("Yanlış seçim yaptın !!!");
				onLocation();
			}
		}
	}
	
	Scanner scanner = new Scanner(System.in);
	
	public void combat(Monster m) throws Exception {
		
		System.out.println("⚔️⚔⚔⚔️⚔⚔⚔️⚔⚔⚔️⚔⚔⚔️⚔⚔⚔️⚔⚔⚔️⚔⚔⚔️⚔⚔");
		System.out.println();
		System.out.println("Canavarın mevcut canı: " + m.getHealthy());
		System.out.println("Senin mevcut canın: " + getPlayer().getHealthy());
		scanner.nextLine();

		while (m.getHealthy()>0&&getPlayer().getHealthy()>0) {
			System.out.print(getPlayer().getName() + " saldırıyor   >>>>>>>>>>");
			m.setHealthy(m.getHealthy()-getPlayer().getDamage());
			if(m.getHealthy()<=0) {
				System.out.print(" Canavarın kalan canı: 0");
				System.out.println("   ----------   Senin kalan canın: " + getPlayer().getHealthy());
				scanner.nextLine();
			}else {
				System.out.print(" Canavarın kalan canı: " + m.getHealthy());
				System.out.println("   ----------   Senin kalan canın: " + getPlayer().getHealthy());
				scanner.nextLine();
			}
			
			if(m.getHealthy()<=0) {
				System.out.print("TEBRİKLER");
				break;
			}
			
			System.out.print(m.getName() + " saldırıyor <<<<<<<<<<");
			System.out.print(" Canavarın kalan canı: " + m.getHealthy());
			getPlayer().setHealthy(getPlayer().getHealthy()-m.getDamage());
			System.out.println("   ----------   Senin kalan canın: " + getPlayer().getHealthy());
			scanner.nextLine();
			
			if (getPlayer().getHealthy()<=0) {
				System.out.println("!!!!!!!!!!!!!!!!     💀    ÖLDÜNÜZ     💀    !!!!!!!!!!!!!!!!");
				throw new Exception("ÖLDÜNÜZ. OYUN BİTTİ");
			}
		}
	}
	
	
}
